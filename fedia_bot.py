#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Fedia Adventure Telegram Bot
- Sends a 100-step interactive journey for a 10-year-old boy Fedia.
- At each step user gets two choices (InlineKeyboard). Any choice advances to the next step.
- The ending is always the same: Fedia arrives in Feodosiya and realizes it is the best place in the world.

Requirements:
  pip install "python-telegram-bot>=20,<22"

Run:
  export BOT_TOKEN="8378653232:AAEw_-F8tDB1u6G33veUP-ZM7BNVMMKN934"
  python fedia_bot.py
"""
import os
import json
import logging
from typing import Dict, Any

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    Application,
    ContextTypes,
    CommandHandler,
    CallbackQueryHandler,
)

# --- Config ---
TOKEN = os.getenv("BOT_TOKEN", "8378653232:AAEw_-F8tDB1u6G33veUP-ZM7BNVMMKN934")
DATA_FILE = os.path.join(os.path.dirname(__file__), "fedia_story.json")
TOTAL_STEPS = 100

# --- Logging ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- Load story ---
if not os.path.exists(DATA_FILE):
    raise FileNotFoundError(
        f"–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å –∏—Å—Ç–æ—Ä–∏–µ–π: {DATA_FILE}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ fedia_story.json –ª–µ–∂–∏—Ç —Ä—è–¥–æ–º —Å fedia_bot.py"
    )

with open(DATA_FILE, "r", encoding="utf-8") as f:
    STORY = json.load(f)

def _get_user_state(context: ContextTypes.DEFAULT_TYPE) -> Dict[str, Any]:
    # step is 0-based index into STORY
    if "step" not in context.user_data:
        context.user_data["step"] = 0
    if "path" not in context.user_data:
        context.user_data["path"] = []
    return context.user_data

def _build_keyboard(step_idx: int) -> InlineKeyboardMarkup:
    step = STORY[step_idx]
    a = step["a"]
    b = step["b"]
    kb = [
        [
            InlineKeyboardButton(a, callback_data=f"choose|{step_idx}|a"),
            InlineKeyboardButton(b, callback_data=f"choose|{step_idx}|b"),
        ]
    ]
    return InlineKeyboardMarkup(kb)

async def _send_step(update: Update, context: ContextTypes.DEFAULT_TYPE, step_idx: int) -> None:
    """Send step text with two choice buttons."""
    step = STORY[step_idx]
    header = f"–®–∞–≥ {step['id']}/{TOTAL_STEPS}"
    text = f"{header}\n\n{step['text']}\n\n–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç:"
    await update.effective_chat.send_message(text, reply_markup=_build_keyboard(step_idx))

async def _send_final(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    path = context.user_data.get("path", [])
    # Optional: show short summary of choices count
    total = len(path)
    await update.effective_chat.send_message(
        "üèÅ –§–ò–ù–ê–õ –ü–£–¢–ï–®–ï–°–¢–í–ò–Ø\n\n"
        "–§–µ–¥—è –ø—Ä–∏–µ–∑–∂–∞–µ—Ç –≤ –≥–æ—Ä–æ–¥ –§–µ–æ–¥–æ—Å–∏—è, —Å–ª—ã—à–∏—Ç —à—ë–ø–æ—Ç –º–æ—Ä—è –∏ –ø–æ–Ω–∏–º–∞–µ—Ç: "
        "—ç—Ç–æ –ª—É—á—à–µ–µ –º–µ—Å—Ç–æ –≤ –º–∏—Ä–µ. –ó–¥–µ—Å—å ‚Äî —Å–≤–µ—Ç, –ø—Ä–æ—Å—Ç–æ—Ä—ã –∏ —Ä–∞–¥–æ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∏–π. "
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–ª –µ–≥–æ –Ω–∞ –ø—É—Ç–∏!"
        f"\n\n–°–¥–µ–ª–∞–Ω–æ –≤—ã–±–æ—Ä–æ–≤: {total}. –ß—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑ ‚Äî /reset"
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    state = _get_user_state(context)
    state["step"] = 0
    state["path"] = []
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ú–∞–ª—å—á–∏–∫–∞ –§–µ–¥–∏ (10 –ª–µ—Ç). "
        "–ù–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ —É —Ç–µ–±—è –±—É–¥–µ—Ç –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤—ã–±–æ—Ä–∞. –ö–∞–∫–æ–π –±—ã —Ç—ã –Ω–∏ –≤—ã–±—Ä–∞–ª, "
        "–∏—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—Å—è –∏ –ø—Ä–∏–≤–µ–¥—ë—Ç –∫ –æ–¥–Ω–æ–º—É —Ñ–∏–Ω–∞–ª—É. –ü–æ–µ—Ö–∞–ª–∏!"
    )
    await _send_step(update, context, 0)

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n"
        "/reset ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "/progress ‚Äî —Ç–µ–∫—É—â–∏–π —à–∞–≥\n"
        "/help ‚Äî –ø–æ–º–æ—â—å"
    )

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    state = _get_user_state(context)
    state["step"] = 0
    state["path"] = []
    await update.message.reply_text("–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞!")
    await _send_step(update, context, 0)

async def progress(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    state = _get_user_state(context)
    step = state.get("step", 0)
    await update.message.reply_text(f"–¢—ã –Ω–∞ —à–∞–≥–µ {step+1} –∏–∑ {TOTAL_STEPS}.")

async def on_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle inline button presses: 'choose|<step_idx>|a' or 'b'"""
    query = update.callback_query
    await query.answer()
    data = query.data or ""
    try:
        kind, step_idx_str, which = data.split("|")
        step_idx = int(step_idx_str)
    except Exception:
        logger.exception("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ callback: %s", data)
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å –≤—ã–±–æ—Ä–æ–º. –ù–∞–∂–º–∏ /reset –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return

    state = _get_user_state(context)
    # Only accept if pressing for the current step (avoid double-press / race)
    if step_idx != state["step"]:
        # Just ignore or gently indicate
        await query.answer("–≠—Ç–æ—Ç —à–∞–≥ —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω.", show_alert=False)
        return

    # Record the choice
    step_obj = STORY[step_idx]
    chosen_text = step_obj["a"] if which == "a" else step_obj["b"]
    state["path"].append({"step": step_idx+1, "choice": which, "text": chosen_text})

    # Advance
    state["step"] += 1
    next_idx = state["step"]

    # Update previous message to show the chosen option (optional)
    try:
        await query.edit_message_text(
            f"{step_obj['text']}\n\n–¢–≤–æ–π –≤—ã–±–æ—Ä: {chosen_text} ‚úÖ"
        )
    except Exception:
        # Editing may fail if message is too old etc. Just log.
        logger.debug("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —à–∞–≥–æ–º.")

    # Send next step or final
    if next_idx < TOTAL_STEPS:
        await _send_step(update, context, next_idx)
    else:
        await _send_final(update, context)

def main() -> None:
    if not TOKEN or TOKEN == "PUT_YOUR_TELEGRAM_BOT_TOKEN_HERE":
        raise RuntimeError("–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏ —Ç–æ–∫–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –∏–ª–∏ –ø—Ä—è–º–æ –≤ –∫–æ–¥–µ.")
    app: Application = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("reset", reset))
    app.add_handler(CommandHandler("progress", progress))
    app.add_handler(CallbackQueryHandler(on_choice, pattern=r"^choose\|"))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è...")
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
